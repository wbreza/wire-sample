// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package actions

import (
	"github.com/google/wire"
	"github.com/wbreza/wire-sample/pkg/config"
	"github.com/wbreza/wire-sample/pkg/exec"
	"github.com/wbreza/wire-sample/pkg/provisioning"
	"github.com/wbreza/wire-sample/pkg/tools"
	"github.com/wbreza/wire-sample/pkg/tools/az"
)

// Injectors from wire.go:

func InjectInitAction(template string) (Action, error) {
	actionsInitOptions := initOptions{
		template: template,
	}
	commandRunner := exec.NewShellCommandRunner()
	userAgent, err := tools.InjectUserAgent()
	if err != nil {
		return nil, err
	}
	cli := az.NewCli(commandRunner, userAgent)
	action := NewInitAction(actionsInitOptions, cli)
	return action, nil
}

func InjectDeployAction() (Action, error) {
	commandRunner := exec.NewShellCommandRunner()
	userAgent, err := tools.InjectUserAgent()
	if err != nil {
		return nil, err
	}
	cli := az.NewCli(commandRunner, userAgent)
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	action := NewDeployAction(cli, configConfig)
	return action, nil
}

func InjectProvisionAction(providerName string, args ...any) (Action, error) {
	actionsProvisionOptions := provisionOptions{
		provider: providerName,
	}
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	provider, err := provisioning.NewProvider(configConfig, providerName, args...)
	if err != nil {
		return nil, err
	}
	commandRunner := exec.NewShellCommandRunner()
	userAgent, err := tools.InjectUserAgent()
	if err != nil {
		return nil, err
	}
	cli := az.NewCli(commandRunner, userAgent)
	manager := provisioning.NewManager(provider, cli)
	action := NewProvisionAction(actionsProvisionOptions, manager)
	return action, nil
}

// wire.go:

var commonSet = wire.NewSet(provisioning.ProviderSet)
